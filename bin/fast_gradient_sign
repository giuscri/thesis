#!/usr/bin/env python

import numpy as np

import itertools, argparse, json, logging, os
from binascii import hexlify
from re import findall

import sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from tools.datasets import mnist
from tools.models import fc_100_100_10, pca_filtered_model, train, load_from_file
from tools.attacks import fast_gradient_sign, fgs_adversarial_score

PREFIX = os.environ.get('PREFIX', '.')

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')

argumentparser = argparse.ArgumentParser()
argumentparser.add_argument('--plot', action='store_true',
                            help='plot data')
argumentparser.add_argument('--eta', nargs='+', type=float,
                            help='values eta to try when generating adv/ examples')
argumentparser.add_argument('--model', nargs='+',
                            help='path to models to attack')
arguments = argumentparser.parse_args()

PLOT = arguments.plot
MODEL = arguments.model
ETA = arguments.eta

X_train, y_train, X_test, y_test = mnist()

model_dictionary = {}

for filename in MODEL:
    model = load_from_file(filename)
    if 'reconstruction' in filename:
        model_identifier = f'reconstruction/{model.name}'
    elif 'retraining' in filename:
        model_identifier = f'retraining/{model.name}'
    model_dictionary[model_identifier] = model

def sort_key(model_identifier):
    found = findall('pca-filtered-model-(\d+)-components', model_identifier)
    if len(found) != 1: return np.inf
    return int(found[0])

model_dictionary_keys = list(model_dictionary.keys())
model_dictionary_keys.sort(key=sort_key, reverse=True)

score_dictionary = {}

for model_identifier, eta in itertools.product(model_dictionary_keys, ETA):
    logging.info(f'computing score for combination: ({model_identifier}, {eta})')
    model = model_dictionary[model_identifier]
    adversarial_score = int(100 * fgs_adversarial_score(model, X_test, y_test, eta))
    scores_for_model = score_dictionary.get(model_identifier, {})
    scores_for_model[eta] = adversarial_score
    score_dictionary[model_identifier] = scores_for_model

print(json.dumps(score_dictionary))

for model_identifier in score_dictionary.keys():
    directory = os.path.dirname(model_identifier)
    os.makedirs(f'{PREFIX}/fast-gradient-sign/{directory}', exist_ok=True)
    with open(f'{PREFIX}/fast-gradient-sign/{model_identifier}.json', 'w') as f:
        json.dump(score_dictionary[model_identifier], f)

if PLOT:
    from matplotlib import pyplot as plt

    plt.grid(linestyle='--')
    plt.xlabel('$\eta$')
    plt.ylabel('Adversarial success (\%)')

    for model_identifier in score_dictionary.keys():
        scores_for_model = score_dictionary[model_identifier]
        x, y = [], []
        for eta in scores_for_model.keys():
            x.append(eta)
            y.append(scores_for_model[eta])
        plt.plot(x, y, 'o', label=model_identifier)

    plt.legend()
    os.makedirs(f'{PREFIX}/fast-gradient-sign/', exist_ok=True)
    random_string = hexlify(os.urandom(32)[:10]).decode()
    plt.savefig(f'{PREFIX}/fast-gradient-sign/{random_string}.png')
    plt.show()
