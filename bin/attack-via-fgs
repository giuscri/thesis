#!/usr/bin/env python

import numpy as np
import itertools, argparse, json, logging, os
from re import findall
import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt
import sys

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from datasets import mnist
from models import fc_100_100_10, pca_filtered_model, train, load_from_file
from attacks import adversarial_example, adversarial_score
from utils import random_string, dump_json_to_file

logging.basicConfig(format='%(asctime)s - %(message)s')
logger = logging.getLogger()
logger.setLevel('INFO')
info = lambda message: logger.info(message)

argumentparser = argparse.ArgumentParser()
argumentparser.add_argument('--plot', action='store_true', help='plot data')
argumentparser.add_argument('--eta', nargs='+', type=float, help='values eta for generating adv/ examples')
argumentparser.add_argument('--model', nargs='+', help='path to models to attack')
arguments = argumentparser.parse_args()

PLOT = arguments.plot
MODEL = arguments.model
ETA = arguments.eta
PREFIX = os.environ.get('PREFIX', '.')
SESSION_ID = random_string()

X_train, y_train, X_test, y_test = mnist()

model_dictionary = {}

for filename in MODEL:
    model = load_from_file(filename)
    if 'reconstruction' in filename:
        model_identifier = f'{model.name}-reconstruction'
    elif 'retraining' in filename:
        model_identifier = f'{model.name}-retraining'
    else:
        model_identifier = model.name

    model_dictionary[model_identifier] = model

def sort_key(model_identifier):
    found = findall('pca-filtered-model-(\d+)-components', model_identifier)
    if len(found) != 1: return np.inf
    return int(found[0])

model_dictionary_keys = list(model_dictionary.keys())
model_dictionary_keys.sort(key=sort_key, reverse=True)

score_dictionary = {k: {} for k in model_dictionary_keys}

for model_identifier, eta in itertools.product(model_dictionary_keys, ETA):
    info(f'computing score for combination: ({model_identifier}, {eta})')
    model = model_dictionary[model_identifier]
    score = int(100 * adversarial_score(model, X_test, y_test, eta))
    score_dictionary[model_identifier].update({eta: score})

print(json.dumps(score_dictionary))
dump_json_to_file(score_dictionary, f"{PREFIX}/attack/fgs/{SESSION_ID}/score_dictionary.json")

for model_identifier in score_dictionary.keys():
    dump_json_to_file(score_dictionary[model_identifier], f"{PREFIX}/attack/fgs/{SESSION_ID}/{model_identifier}.json")

if PLOT:
    plt.figure(figsize=(20, 10))
    plt.grid(linestyle='--')
    plt.xlabel('$\eta$')
    plt.ylabel('Adversarial success (%)')

    for model_identifier in score_dictionary.keys():
        scores_for_model = score_dictionary[model_identifier]
        x, y = [], []
        for eta in scores_for_model.keys():
            x.append(eta)
            y.append(scores_for_model[eta])
        plt.plot(x, y, 'o', label=model_identifier)

    plt.legend()
    os.makedirs(f'{PREFIX}/attack/fgs/', exist_ok=True)
    plt.savefig(f'{PREFIX}/attack/fgs/{SESSION_ID}/plot.png')
