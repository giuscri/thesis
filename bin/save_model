#!/usr/bin/env python

import os, sys
import keras.backend as K
import tensorflow as tf
import numpy as np
from argparse import ArgumentParser

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from datasets import mnist
from models import train, accuracy, save_to_file, fc_100_100_10, pca_filtered_model

argumentparser = ArgumentParser()
argumentparser.add_argument('--no-defense', action='store_true', help='save fully connected network without any defense')
argumentparser.add_argument('--pca', type=int, nargs='+', default=[], help='specify number of components to keep when using PCA')
argumentparser.add_argument('--epochs', type=int, required=True, help='number of epochs to train models for')
argumentparser.add_argument('--retraining', action='store_true', help='use retraining defense when using filters')
argumentparser.add_argument('--reconstruction', action='store_true', help='use retraining defense when using filters')
argumentparser.add_argument('--random-state', type=int, help='random state to specify for reproducible trainings')
arguments = argumentparser.parse_args()

NO_DEFENSE = arguments.no_defense
PCA = arguments.pca
EPOCHS = arguments.epochs
RETRAINING = arguments.retraining
RECONSTRUCTION = arguments.reconstruction
RANDOM_STATE = arguments.random_state
PREFIX = os.environ.get('PREFIX', '.')

X_train, y_train, X_test, y_test = mnist()

if RANDOM_STATE is not None:
    K.clear_session()
    tf.set_random_seed(RANDOM_STATE)
    np.random.seed(RANDOM_STATE)

if NO_DEFENSE:
    model = fc_100_100_10()
    train(model, X_train, y_train, epochs=EPOCHS, verbose=True)
    dirname = f"{PREFIX}/model/fc-100-100-10/"
    save_to_file(model, dirname)

for n_components in PCA:
    if RECONSTRUCTION:
        model = pca_filtered_model(fc_100_100_10(), X_train, n_components)
        train(model, X_train, y_train, epochs=EPOCHS, verbose=True, preprocess=False)
        dirname = f"{PREFIX}/model/reconstruction/pca-filtered-model-{n_components}-components/"
        save_to_file(model, dirname)

    if RETRAINING:
        model = pca_filtered_model(fc_100_100_10(), X_train, n_components)
        train(model, X_train, y_train, epochs=EPOCHS, verbose=True, preprocess=True)
        dirname = (
            f"{PREFIX}/model/retraining/pca-filtered-model-{n_components}-components/"
        )
        save_to_file(model, dirname)
